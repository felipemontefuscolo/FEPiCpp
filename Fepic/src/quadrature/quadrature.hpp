// This file is part of FEPiC++, a toolbox for finite element codes.
//
// FEPiC++ is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// FEPiC++ is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License or the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License and a copy of the GNU General Public License along with
// FEPiC++. If not, see <http://www.gnu.org/licenses/>.

#ifndef FEPIC_QUADRATURE_HPP
#define FEPIC_QUADRATURE_HPP


template<class T> class Quadrature;


template<>
class Quadrature<Simplex<2> >
{
public:
  Quadrature(int n=1) : order(n)
  {
    this->setOrder(n);
  }

  int getNumPoints()
  {
    return weight.size();
  }

  void setOrder(int n)
  {


    switch (n)
    {
      case 1:
      {
        L.resize(1); weight.resize(1);
        L[0][0] = 0.333333333333333333L; L[0][1] = 0.333333333333333333L; weight[0] = 1.000000000000000000L;
      }
      break;

      case 2:
      {
        L.resize(3); weight.resize(3);
        L[0][0] = 0.166666666666666667L; L[0][1] = 0.166666666666666667L;  weight[0] = 0.333333333333333333L;
        L[1][0] = 0.166666666666666667L; L[1][1] = 0.666666666666666667L;  weight[1] = 0.333333333333333333L;
        L[2][0] = 0.666666666666666667L; L[2][1] = 0.166666666666666667L;  weight[2] = 0.333333333333333333L;
      }
      break;

      case 3:
      {
        L.resize(6); weight.resize(6);
        L[0][0] = 0.445948490915964886L; L[0][1] = 0.445948490915964886L;  weight[0] = 0.223381589678011466L;
        L[1][0] = 0.445948490915964886L; L[1][1] = 0.108103018168070227L;  weight[1] = 0.223381589678011466L;
        L[2][0] = 0.108103018168070227L; L[2][1] = 0.445948490915964886L;  weight[2] = 0.223381589678011466L;
        L[3][0] = 0.091576213509770743L; L[3][1] = 0.091576213509770743L;  weight[3] = 0.109951743655321868L;
        L[4][0] = 0.091576213509770743L; L[4][1] = 0.816847572980458513L;  weight[4] = 0.109951743655321868L;
        L[5][0] = 0.816847572980458513L; L[5][1] = 0.091576213509770743L;  weight[5] = 0.109951743655321868L;
      }
      break;

      case 5:
      {
        L.resize(7); weight.resize(7);
        L[0][0] = 0.101286507323456339L; L[0][1] = 0.101286507323456339L;  weight[0] = 0.125939180544827153L;
        L[1][0] = 0.101286507323456339L; L[1][1] = 0.797426985353087322L;  weight[1] = 0.125939180544827153L;
        L[2][0] = 0.797426985353087322L; L[2][1] = 0.101286507323456339L;  weight[2] = 0.125939180544827153L;
        L[3][0] = 0.470142064105115090L; L[3][1] = 0.470142064105115090L;  weight[3] = 0.132394152788506181L;
        L[4][0] = 0.470142064105115090L; L[4][1] = 0.059715871789769820L;  weight[4] = 0.132394152788506181L;
        L[5][0] = 0.059715871789769820L; L[5][1] = 0.470142064105115090L;  weight[5] = 0.132394152788506181L;
        L[6][0] = 0.333333333333333333L; L[6][1] = 0.333333333333333333L;  weight[6] = 0.225000000000000000L;
      }
      break;

      case 6:
      {
        L.resize(12); weight.resize(12);
        L[0][0] = 0.063089014491502228L; L[0][1] = 0.063089014491502228L;  weight[0] = 0.050844906370206817L;
        L[1][0] = 0.063089014491502228L; L[1][1] = 0.873821971016995543L;  weight[1] = 0.050844906370206817L;
        L[2][0] = 0.873821971016995543L; L[2][1] = 0.063089014491502228L;  weight[2] = 0.050844906370206817L;
        L[3][0] = 0.249286745170910421L; L[3][1] = 0.249286745170910421L;  weight[3] = 0.116786275726379366L;
        L[4][0] = 0.249286745170910421L; L[4][1] = 0.501426509658179157L;  weight[4] = 0.116786275726379366L;
        L[5][0] = 0.501426509658179157L; L[5][1] = 0.249286745170910421L;  weight[5] = 0.116786275726379366L;
        L[6][0] = 0.053145049844816947L; L[6][1] = 0.310352451033784405L;  weight[6] = 0.082851075618373575L;
        L[7][0] = 0.053145049844816947L; L[7][1] = 0.636502499121398647L;  weight[7] = 0.082851075618373575L;
        L[8][0] = 0.310352451033784405L; L[8][1] = 0.053145049844816947L;  weight[8] = 0.082851075618373575L;
        L[9][0] = 0.310352451033784405L; L[9][1] = 0.636502499121398647L;  weight[9] = 0.082851075618373575L;
        L[10][0] = 0.636502499121398647L; L[10][1] = 0.053145049844816947L;  weight[10] = 0.082851075618373575L;
        L[11][0] = 0.636502499121398647L; L[11][1] = 0.310352451033784405L;  weight[11] = 0.082851075618373575L;
      }
      break;
      
      case 7:
      {
        L.resize(15); weight.resize(15);
        L[0][0] = 0.028263924156076340L; L[0][1] = 0.028263924156076340L;  weight[0] = 0.013533862515665562L;
        L[1][0] = 0.028263924156076340L; L[1][1] = 0.943472151687847320L;  weight[1] = 0.013533862515665562L;
        L[2][0] = 0.943472151687847320L; L[2][1] = 0.028263924156076340L;  weight[2] = 0.013533862515665562L;
        L[3][0] = 0.474311323267222575L; L[3][1] = 0.474311323267222575L;  weight[3] = 0.078951254432010981L;
        L[4][0] = 0.474311323267222575L; L[4][1] = 0.051377353465554849L;  weight[4] = 0.078951254432010981L;
        L[5][0] = 0.051377353465554849L; L[5][1] = 0.474311323267222575L;  weight[5] = 0.078951254432010981L;
        L[6][0] = 0.241143325849848810L; L[6][1] = 0.241143325849848810L;  weight[6] = 0.128607927818906075L;
        L[7][0] = 0.241143325849848810L; L[7][1] = 0.517713348300302379L;  weight[7] = 0.128607927818906075L;
        L[8][0] = 0.517713348300302379L; L[8][1] = 0.241143325849848810L;  weight[8] = 0.128607927818906075L;
        L[9][0] = 0.761222748024523800L; L[9][1] = 0.046270877798808911L;  weight[9] = 0.056120144283375358L;
        L[10][0] = 0.761222748024523800L; L[10][1] = 0.192506374176667289L;  weight[10] = 0.056120144283375358L;
        L[11][0] = 0.046270877798808911L; L[11][1] = 0.761222748024523800L;  weight[11] = 0.056120144283375358L;
        L[12][0] = 0.046270877798808911L; L[12][1] = 0.192506374176667289L;  weight[12] = 0.056120144283375358L;
        L[13][0] = 0.192506374176667289L; L[13][1] = 0.761222748024523800L;  weight[13] = 0.056120144283375358L;
        L[14][0] = 0.192506374176667289L; L[14][1] = 0.046270877798808911L;  weight[14] = 0.056120144283375358L;
      }
      break;

      case 8:
      {
        L.resize(16); weight.resize(16);
        L[0][0] = 0.333333333333333333L; L[0][1] = 0.333333333333333333L;  weight[0] = 0.144315607677787168L;
        L[1][0] = 0.170569307751760207L; L[1][1] = 0.170569307751760207L;  weight[1] = 0.103217370534718250L;
        L[2][0] = 0.170569307751760207L; L[2][1] = 0.658861384496479587L;  weight[2] = 0.103217370534718250L;
        L[3][0] = 0.658861384496479587L; L[3][1] = 0.170569307751760207L;  weight[3] = 0.103217370534718250L;
        L[4][0] = 0.050547228317030975L; L[4][1] = 0.050547228317030975L;  weight[4] = 0.032458497623198080L;
        L[5][0] = 0.050547228317030975L; L[5][1] = 0.898905543365938049L;  weight[5] = 0.032458497623198080L;
        L[6][0] = 0.898905543365938049L; L[6][1] = 0.050547228317030975L;  weight[6] = 0.032458497623198080L;
        L[7][0] = 0.459292588292723156L; L[7][1] = 0.459292588292723156L;  weight[7] = 0.095091634267284625L;
        L[8][0] = 0.459292588292723156L; L[8][1] = 0.081414823414553688L;  weight[8] = 0.095091634267284625L;
        L[9][0] = 0.081414823414553688L; L[9][1] = 0.459292588292723156L;  weight[9] = 0.095091634267284625L;
        L[10][0] = 0.263112829634638113L; L[10][1] = 0.008394777409957605L;  weight[10] = 0.027230314174434994L;
        L[11][0] = 0.263112829634638113L; L[11][1] = 0.728492392955404281L;  weight[11] = 0.027230314174434994L;
        L[12][0] = 0.008394777409957605L; L[12][1] = 0.263112829634638113L;  weight[12] = 0.027230314174434994L;
        L[13][0] = 0.008394777409957605L; L[13][1] = 0.728492392955404281L;  weight[13] = 0.027230314174434994L;
        L[14][0] = 0.728492392955404281L; L[14][1] = 0.263112829634638113L;  weight[14] = 0.027230314174434994L;
        L[15][0] = 0.728492392955404281L; L[15][1] = 0.008394777409957605L;  weight[15] = 0.027230314174434994L;
      }
      break;
      
      case 9:
      {
        L.resize(19); weight.resize(19);
        L[0][0] = 0.333333333333333333L; L[0][1] = 0.333333333333333333L;  weight[0] = 0.097135796282798834L;
        L[1][0] = 0.489682519198737628L; L[1][1] = 0.489682519198737628L;  weight[1] = 0.031334700227139071L;
        L[2][0] = 0.489682519198737628L; L[2][1] = 0.020634961602524744L;  weight[2] = 0.031334700227139071L;
        L[3][0] = 0.020634961602524744L; L[3][1] = 0.489682519198737628L;  weight[3] = 0.031334700227139071L;
        L[4][0] = 0.044729513394452710L; L[4][1] = 0.044729513394452710L;  weight[4] = 0.025577675658698031L;
        L[5][0] = 0.044729513394452710L; L[5][1] = 0.910540973211094580L;  weight[5] = 0.025577675658698031L;
        L[6][0] = 0.910540973211094580L; L[6][1] = 0.044729513394452710L;  weight[6] = 0.025577675658698031L;
        L[7][0] = 0.437089591492936637L; L[7][1] = 0.437089591492936637L;  weight[7] = 0.077827541004774279L;
        L[8][0] = 0.437089591492936637L; L[8][1] = 0.125820817014126725L;  weight[8] = 0.077827541004774279L;
        L[9][0] = 0.125820817014126725L; L[9][1] = 0.437089591492936637L;  weight[9] = 0.077827541004774279L;
        L[10][0] = 0.188203535619032730L; L[10][1] = 0.188203535619032730L;  weight[10] = 0.079647738927210253L;
        L[11][0] = 0.188203535619032730L; L[11][1] = 0.623592928761934540L;  weight[11] = 0.079647738927210253L;
        L[12][0] = 0.623592928761934540L; L[12][1] = 0.188203535619032730L;  weight[12] = 0.079647738927210253L;
        L[13][0] = 0.741198598784498021L; L[13][1] = 0.221962989160765696L;  weight[13] = 0.043283539377289377L;
        L[14][0] = 0.741198598784498021L; L[14][1] = 0.036838412054736284L;  weight[14] = 0.043283539377289377L;
        L[15][0] = 0.221962989160765696L; L[15][1] = 0.741198598784498021L;  weight[15] = 0.043283539377289377L;
        L[16][0] = 0.221962989160765696L; L[16][1] = 0.036838412054736284L;  weight[16] = 0.043283539377289377L;
        L[17][0] = 0.036838412054736284L; L[17][1] = 0.741198598784498021L;  weight[17] = 0.043283539377289377L;
        L[18][0] = 0.036838412054736284L; L[18][1] = 0.221962989160765696L;  weight[18] = 0.043283539377289377L;

      }
      break;

      case 10:
      {
        L.resize(25); weight.resize(25);
        L[0][0] = 0.333333333333333333L; L[0][1] = 0.333333333333333333L;  weight[0] = 0.080937428797622880L;
        L[1][0] = 0.427273178846775538L; L[1][1] = 0.427273178846775538L;  weight[1] = 0.077298588002963122L;
        L[2][0] = 0.427273178846775538L; L[2][1] = 0.145453642306448924L;  weight[2] = 0.077298588002963122L;
        L[3][0] = 0.145453642306448924L; L[3][1] = 0.427273178846775538L;  weight[3] = 0.077298588002963122L;
        L[4][0] = 0.183099222448675021L; L[4][1] = 0.183099222448675021L;  weight[4] = 0.078457638612371731L;
        L[5][0] = 0.183099222448675021L; L[5][1] = 0.633801555102649959L;  weight[5] = 0.078457638612371731L;
        L[6][0] = 0.633801555102649959L; L[6][1] = 0.183099222448675021L;  weight[6] = 0.078457638612371731L;
        L[7][0] = 0.490434019701130587L; L[7][1] = 0.490434019701130587L;  weight[7] = 0.017469167995929487L;
        L[8][0] = 0.490434019701130587L; L[8][1] = 0.019131960597738825L;  weight[8] = 0.017469167995929487L;
        L[9][0] = 0.019131960597738825L; L[9][1] = 0.490434019701130587L;  weight[9] = 0.017469167995929487L;
        L[10][0] = 0.012572445551580533L; L[10][1] = 0.012572445551580533L;  weight[10] = 0.004292374184832828L;
        L[11][0] = 0.012572445551580533L; L[11][1] = 0.974855108896838935L;  weight[11] = 0.004292374184832828L;
        L[12][0] = 0.974855108896838935L; L[12][1] = 0.012572445551580533L;  weight[12] = 0.004292374184832828L;
        L[13][0] = 0.654268667920066141L; L[13][1] = 0.308046001685247706L;  weight[13] = 0.037468858210467643L;
        L[14][0] = 0.654268667920066141L; L[14][1] = 0.037685330394686154L;  weight[14] = 0.037468858210467643L;
        L[15][0] = 0.308046001685247706L; L[15][1] = 0.654268667920066141L;  weight[15] = 0.037468858210467643L;
        L[16][0] = 0.308046001685247706L; L[16][1] = 0.037685330394686154L;  weight[16] = 0.037468858210467643L;
        L[17][0] = 0.037685330394686154L; L[17][1] = 0.654268667920066141L;  weight[17] = 0.037468858210467643L;
        L[18][0] = 0.037685330394686154L; L[18][1] = 0.308046001685247706L;  weight[18] = 0.037468858210467643L;
        L[19][0] = 0.122804577068559273L; L[19][1] = 0.033371833739304788L;  weight[19] = 0.026949352591879960L;
        L[20][0] = 0.122804577068559273L; L[20][1] = 0.843823589192135939L;  weight[20] = 0.026949352591879960L;
        L[21][0] = 0.033371833739304788L; L[21][1] = 0.122804577068559273L;  weight[21] = 0.026949352591879960L;
        L[22][0] = 0.033371833739304788L; L[22][1] = 0.843823589192135939L;  weight[22] = 0.026949352591879960L;
        L[23][0] = 0.843823589192135939L; L[23][1] = 0.122804577068559273L;  weight[23] = 0.026949352591879960L;
        L[24][0] = 0.843823589192135939L; L[24][1] = 0.033371833739304788L;  weight[24] = 0.026949352591879960L;
      }
      break;


      default:
      {
        std::cout << "erro: ordem de quadratura inválida ou não suportada\n";
        throw;
      }
      
    }

    weight /= 2.;
  } // end setOrder

  /** Avalia uma função nos pontos de quadratura no triangulo UNITARIO
  *
  *  @param t a função
  *  @param a os argumentos da função
  *
  *  @note a função deve recever os argumentos tal que \n
  *        f = f(L, [a]) \n
  *        onde L é um vetor 2d e a são os eventuais argumentos que a função pode tomar
  */
  template<class T, class ... Args>
  auto evaluate(T &&t, Args ... a) -> Eigen::Matrix<decltype(t(a...)), Eigen::Dynamic, 1>
  {
    Eigen::Matrix<decltype(t(a...)), Eigen::Dynamic, 1> ret(L.size());
    auto it = ret.begin();
    
    int q=0;
    for (; it != ret.end(); ++it)
    {
      (*it) = t(L[q], a...);
      ++q;
    }
    
    return ret;
  }
  
  
  
  int order;
  Eigen::Matrix<Eigen::Vector2d, Eigen::Dynamic, 1> L;
  Eigen::VectorXd          weight;
};



template<>
class Quadrature<Simplex<3> >
{
public:
  Quadrature(int n=2) : order(n)
  {
    this->setOrder(n);
  }
  
  int getNumPoints()
  {
    return weight.size();
  }
  
  void setOrder(int n)
  {
  
    switch (n)
    {
      case 1:
      {
        L.resize(1); weight.resize(1);
        L[0][0] = 0.25L; L[0][1] = 0.25L; L[0][2] = 0.25L; weight[0] = 1.000000000000000000L;
      }
      break;
      
      case 2:
      {
        L.resize(4); weight.resize(4);
        L[0][0] = 0.138196601125010515L; L[0][1] = 0.138196601125010515L; L[0][2] = 0.138196601125010515L;  weight[0] = 0.250000000000000000L;
        L[1][0] = 0.138196601125010515L; L[1][1] = 0.138196601125010515L; L[1][2] = 0.585410196624968454L;  weight[1] = 0.250000000000000000L;
        L[2][0] = 0.138196601125010515L; L[2][1] = 0.585410196624968454L; L[2][2] = 0.138196601125010515L;  weight[2] = 0.250000000000000000L;
        L[3][0] = 0.585410196624968454L; L[3][1] = 0.138196601125010515L; L[3][2] = 0.138196601125010515L;  weight[3] = 0.250000000000000000L;
      }
      break;

      case 3:
      {
        L.resize(8); weight.resize(8);
        L[0][0] = 0.328054696711426647L; L[0][1] = 0.328054696711426647L; L[0][2] = 0.328054696711426647L;  weight[0] = 0.138527966511862142L;
        L[1][0] = 0.328054696711426647L; L[1][1] = 0.328054696711426647L; L[1][2] = 0.015835909865720058L;  weight[1] = 0.138527966511862142L;
        L[2][0] = 0.328054696711426647L; L[2][1] = 0.015835909865720058L; L[2][2] = 0.328054696711426647L;  weight[2] = 0.138527966511862142L;
        L[3][0] = 0.015835909865720058L; L[3][1] = 0.328054696711426647L; L[3][2] = 0.328054696711426647L;  weight[3] = 0.138527966511862142L;
        L[4][0] = 0.106952273932930683L; L[4][1] = 0.106952273932930683L; L[4][2] = 0.106952273932930683L;  weight[4] = 0.111472033488137858L;
        L[5][0] = 0.106952273932930683L; L[5][1] = 0.106952273932930683L; L[5][2] = 0.679143178201207952L;  weight[5] = 0.111472033488137858L;
        L[6][0] = 0.106952273932930683L; L[6][1] = 0.679143178201207952L; L[6][2] = 0.106952273932930683L;  weight[6] = 0.111472033488137858L;
        L[7][0] = 0.679143178201207952L; L[7][1] = 0.106952273932930683L; L[7][2] = 0.106952273932930683L;  weight[7] = 0.111472033488137858L;
      }
      break;

      case 5:
      {
        L.resize(14); weight.resize(14);
        L[0][0] = 0.310885919263300610L; L[0][1] = 0.310885919263300610L; L[0][2] = 0.310885919263300610L;  weight[0] = 0.112687925718015851L;
        L[1][0] = 0.310885919263300610L; L[1][1] = 0.310885919263300610L; L[1][2] = 0.067342242210098171L;  weight[1] = 0.112687925718015851L;
        L[2][0] = 0.310885919263300610L; L[2][1] = 0.067342242210098171L; L[2][2] = 0.310885919263300610L;  weight[2] = 0.112687925718015851L;
        L[3][0] = 0.067342242210098171L; L[3][1] = 0.310885919263300610L; L[3][2] = 0.310885919263300610L;  weight[3] = 0.112687925718015851L;
        L[4][0] = 0.092735250310891226L; L[4][1] = 0.092735250310891226L; L[4][2] = 0.092735250310891226L;  weight[4] = 0.073493043116361950L;
        L[5][0] = 0.092735250310891226L; L[5][1] = 0.092735250310891226L; L[5][2] = 0.721794249067326321L;  weight[5] = 0.073493043116361950L;
        L[6][0] = 0.092735250310891226L; L[6][1] = 0.721794249067326321L; L[6][2] = 0.092735250310891226L;  weight[6] = 0.073493043116361950L;
        L[7][0] = 0.721794249067326321L; L[7][1] = 0.092735250310891226L; L[7][2] = 0.092735250310891226L;  weight[7] = 0.073493043116361950L;
        L[8][0] = 0.045503704125649649L; L[8][1] = 0.045503704125649649L; L[8][2] = 0.454496295874350350L;  weight[8] = 0.042546020777081466L;
        L[9][0] = 0.045503704125649649L; L[9][1] = 0.454496295874350350L; L[9][2] = 0.045503704125649649L;  weight[9] = 0.042546020777081466L;
        L[10][0] = 0.045503704125649649L; L[10][1] = 0.454496295874350350L; L[10][2] = 0.454496295874350350L;  weight[10] = 0.042546020777081466L;
        L[11][0] = 0.454496295874350350L; L[11][1] = 0.454496295874350350L; L[11][2] = 0.045503704125649649L;  weight[11] = 0.042546020777081466L;
        L[12][0] = 0.454496295874350350L; L[12][1] = 0.045503704125649649L; L[12][2] = 0.454496295874350350L;  weight[12] = 0.042546020777081466L;
        L[13][0] = 0.454496295874350350L; L[13][1] = 0.045503704125649649L; L[13][2] = 0.045503704125649649L;  weight[13] = 0.042546020777081466L;
      }
      break;

      case 6:
      {
        L.resize(24); weight.resize(24);
        L[0][0] = 0.214602871259152029L; L[0][1] = 0.214602871259152029L; L[0][2] = 0.214602871259152029L;  weight[0] = 0.039922750258167492L;
        L[1][0] = 0.214602871259152029L; L[1][1] = 0.214602871259152029L; L[1][2] = 0.356191386222543912L;  weight[1] = 0.039922750258167492L;
        L[2][0] = 0.214602871259152029L; L[2][1] = 0.356191386222543912L; L[2][2] = 0.214602871259152029L;  weight[2] = 0.039922750258167492L;
        L[3][0] = 0.356191386222543912L; L[3][1] = 0.214602871259152029L; L[3][2] = 0.214602871259152029L;  weight[3] = 0.039922750258167492L;
        L[4][0] = 0.040673958534611353L; L[4][1] = 0.040673958534611353L; L[4][2] = 0.040673958534611353L;  weight[4] = 0.010077211055320643L;
        L[5][0] = 0.040673958534611353L; L[5][1] = 0.040673958534611353L; L[5][2] = 0.877978124396165941L;  weight[5] = 0.010077211055320643L;
        L[6][0] = 0.040673958534611353L; L[6][1] = 0.877978124396165941L; L[6][2] = 0.040673958534611353L;  weight[6] = 0.010077211055320643L;
        L[7][0] = 0.877978124396165941L; L[7][1] = 0.040673958534611353L; L[7][2] = 0.040673958534611353L;  weight[7] = 0.010077211055320643L;
        L[8][0] = 0.322337890142275510L; L[8][1] = 0.322337890142275510L; L[8][2] = 0.322337890142275510L;  weight[8] = 0.055357181543654722L;
        L[9][0] = 0.322337890142275510L; L[9][1] = 0.322337890142275510L; L[9][2] = 0.032986329573173469L;  weight[9] = 0.055357181543654722L;
        L[10][0] = 0.322337890142275510L; L[10][1] = 0.032986329573173469L; L[10][2] = 0.322337890142275510L;  weight[10] = 0.055357181543654722L;
        L[11][0] = 0.032986329573173469L; L[11][1] = 0.322337890142275510L; L[11][2] = 0.322337890142275510L;  weight[11] = 0.055357181543654722L;
        L[12][0] = 0.063661001875017525L; L[12][1] = 0.063661001875017525L; L[12][2] = 0.603005664791649141L;  weight[12] = 0.048214285714285714L;
        L[13][0] = 0.063661001875017525L; L[13][1] = 0.063661001875017525L; L[13][2] = 0.269672331458315808L;  weight[13] = 0.048214285714285714L;
        L[14][0] = 0.063661001875017525L; L[14][1] = 0.603005664791649141L; L[14][2] = 0.063661001875017525L;  weight[14] = 0.048214285714285714L;
        L[15][0] = 0.063661001875017525L; L[15][1] = 0.603005664791649141L; L[15][2] = 0.269672331458315808L;  weight[15] = 0.048214285714285714L;
        L[16][0] = 0.063661001875017525L; L[16][1] = 0.269672331458315808L; L[16][2] = 0.063661001875017525L;  weight[16] = 0.048214285714285714L;
        L[17][0] = 0.063661001875017525L; L[17][1] = 0.269672331458315808L; L[17][2] = 0.603005664791649141L;  weight[17] = 0.048214285714285714L;
        L[18][0] = 0.603005664791649141L; L[18][1] = 0.063661001875017525L; L[18][2] = 0.063661001875017525L;  weight[18] = 0.048214285714285714L;
        L[19][0] = 0.603005664791649141L; L[19][1] = 0.063661001875017525L; L[19][2] = 0.269672331458315808L;  weight[19] = 0.048214285714285714L;
        L[20][0] = 0.603005664791649141L; L[20][1] = 0.269672331458315808L; L[20][2] = 0.063661001875017525L;  weight[20] = 0.048214285714285714L;
        L[21][0] = 0.269672331458315808L; L[21][1] = 0.063661001875017525L; L[21][2] = 0.063661001875017525L;  weight[21] = 0.048214285714285714L;
        L[22][0] = 0.269672331458315808L; L[22][1] = 0.063661001875017525L; L[22][2] = 0.603005664791649141L;  weight[22] = 0.048214285714285714L;
        L[23][0] = 0.269672331458315808L; L[23][1] = 0.603005664791649141L; L[23][2] = 0.063661001875017525L;  weight[23] = 0.048214285714285714L;
      }
      break;
      
      case 7:
      {
        L.resize(36); weight.resize(36);
        L[0][0] = 0.040610707192945272L; L[0][1] = 0.040610707192945272L; L[0][2] = 0.040610707192945272L;  weight[0] = 0.006183415839458518L;
        L[1][0] = 0.040610707192945272L; L[1][1] = 0.040610707192945272L; L[1][2] = 0.878167878421164183L;  weight[1] = 0.006183415839458518L;
        L[2][0] = 0.040610707192945272L; L[2][1] = 0.878167878421164183L; L[2][2] = 0.040610707192945272L;  weight[2] = 0.006183415839458518L;
        L[3][0] = 0.878167878421164183L; L[3][1] = 0.040610707192945272L; L[3][2] = 0.040610707192945272L;  weight[3] = 0.006183415839458518L;
        L[4][0] = 0.178752202696498476L; L[4][1] = 0.178752202696498476L; L[4][2] = 0.178752202696498476L;  weight[4] = 0.078514650273872359L;
        L[5][0] = 0.178752202696498476L; L[5][1] = 0.178752202696498476L; L[5][2] = 0.463743391910504572L;  weight[5] = 0.078514650273872359L;
        L[6][0] = 0.178752202696498476L; L[6][1] = 0.463743391910504572L; L[6][2] = 0.178752202696498476L;  weight[6] = 0.078514650273872359L;
        L[7][0] = 0.463743391910504572L; L[7][1] = 0.178752202696498476L; L[7][2] = 0.178752202696498476L;  weight[7] = 0.078514650273872359L;
        L[8][0] = 0.324949590537337334L; L[8][1] = 0.324949590537337334L; L[8][2] = 0.324949590537337334L;  weight[8] = 0.044739577614322479L;
        L[9][0] = 0.324949590537337334L; L[9][1] = 0.324949590537337334L; L[9][2] = 0.025151228387987999L;  weight[9] = 0.044739577614322479L;
        L[10][0] = 0.324949590537337334L; L[10][1] = 0.025151228387987999L; L[10][2] = 0.324949590537337334L;  weight[10] = 0.044739577614322479L;
        L[11][0] = 0.025151228387987999L; L[11][1] = 0.324949590537337334L; L[11][2] = 0.324949590537337334L;  weight[11] = 0.044739577614322479L;
        L[12][0] = 0.134077737972161192L; L[12][1] = 0.134077737972161192L; L[12][2] = 0.727012507009317100L;  weight[12] = 0.012165144592291294L;
        L[13][0] = 0.134077737972161192L; L[13][1] = 0.134077737972161192L; L[13][2] = 0.004832017046360516L;  weight[13] = 0.012165144592291294L;
        L[14][0] = 0.134077737972161192L; L[14][1] = 0.727012507009317100L; L[14][2] = 0.134077737972161192L;  weight[14] = 0.012165144592291294L;
        L[15][0] = 0.134077737972161192L; L[15][1] = 0.727012507009317100L; L[15][2] = 0.004832017046360516L;  weight[15] = 0.012165144592291294L;
        L[16][0] = 0.134077737972161192L; L[16][1] = 0.004832017046360516L; L[16][2] = 0.134077737972161192L;  weight[16] = 0.012165144592291294L;
        L[17][0] = 0.134077737972161192L; L[17][1] = 0.004832017046360516L; L[17][2] = 0.727012507009317100L;  weight[17] = 0.012165144592291294L;
        L[18][0] = 0.727012507009317100L; L[18][1] = 0.134077737972161192L; L[18][2] = 0.134077737972161192L;  weight[18] = 0.012165144592291294L;
        L[19][0] = 0.727012507009317100L; L[19][1] = 0.134077737972161192L; L[19][2] = 0.004832017046360516L;  weight[19] = 0.012165144592291294L;
        L[20][0] = 0.727012507009317100L; L[20][1] = 0.004832017046360516L; L[20][2] = 0.134077737972161192L;  weight[20] = 0.012165144592291294L;
        L[21][0] = 0.004832017046360516L; L[21][1] = 0.134077737972161192L; L[21][2] = 0.134077737972161192L;  weight[21] = 0.012165144592291294L;
        L[22][0] = 0.004832017046360516L; L[22][1] = 0.134077737972161192L; L[22][2] = 0.727012507009317100L;  weight[22] = 0.012165144592291294L;
        L[23][0] = 0.004832017046360516L; L[23][1] = 0.727012507009317100L; L[23][2] = 0.134077737972161192L;  weight[23] = 0.012165144592291294L;
        L[24][0] = 0.056027540459728477L; L[24][1] = 0.056027540459728477L; L[24][2] = 0.326574099866404958L;  weight[24] = 0.028022307498490921L;
        L[25][0] = 0.056027540459728477L; L[25][1] = 0.056027540459728477L; L[25][2] = 0.561370819214138088L;  weight[25] = 0.028022307498490921L;
        L[26][0] = 0.056027540459728477L; L[26][1] = 0.326574099866404958L; L[26][2] = 0.056027540459728477L;  weight[26] = 0.028022307498490921L;
        L[27][0] = 0.056027540459728477L; L[27][1] = 0.326574099866404958L; L[27][2] = 0.561370819214138088L;  weight[27] = 0.028022307498490921L;
        L[28][0] = 0.056027540459728477L; L[28][1] = 0.561370819214138088L; L[28][2] = 0.056027540459728477L;  weight[28] = 0.028022307498490921L;
        L[29][0] = 0.056027540459728477L; L[29][1] = 0.561370819214138088L; L[29][2] = 0.326574099866404958L;  weight[29] = 0.028022307498490921L;
        L[30][0] = 0.326574099866404958L; L[30][1] = 0.056027540459728477L; L[30][2] = 0.056027540459728477L;  weight[30] = 0.028022307498490921L;
        L[31][0] = 0.326574099866404958L; L[31][1] = 0.056027540459728477L; L[31][2] = 0.561370819214138088L;  weight[31] = 0.028022307498490921L;
        L[32][0] = 0.326574099866404958L; L[32][1] = 0.561370819214138088L; L[32][2] = 0.056027540459728477L;  weight[32] = 0.028022307498490921L;
        L[33][0] = 0.561370819214138088L; L[33][1] = 0.056027540459728477L; L[33][2] = 0.056027540459728477L;  weight[33] = 0.028022307498490921L;
        L[34][0] = 0.561370819214138088L; L[34][1] = 0.056027540459728477L; L[34][2] = 0.326574099866404958L;  weight[34] = 0.028022307498490921L;
        L[35][0] = 0.561370819214138088L; L[35][1] = 0.326574099866404958L; L[35][2] = 0.056027540459728477L;  weight[35] = 0.028022307498490921L;
      }
      break;

      case 8:
      {
        L.resize(46); weight.resize(46);
        L[0][0] = 0.039675423070389901L; L[0][1] = 0.039675423070389901L; L[0][2] = 0.039675423070389901L;  weight[0] = 0.006397147779902321L;
        L[1][0] = 0.039675423070389901L; L[1][1] = 0.039675423070389901L; L[1][2] = 0.880973730788830296L;  weight[1] = 0.006397147779902321L;
        L[2][0] = 0.039675423070389901L; L[2][1] = 0.880973730788830296L; L[2][2] = 0.039675423070389901L;  weight[2] = 0.006397147779902321L;
        L[3][0] = 0.880973730788830296L; L[3][1] = 0.039675423070389901L; L[3][2] = 0.039675423070389901L;  weight[3] = 0.006397147779902321L;
        L[4][0] = 0.314487800698096314L; L[4][1] = 0.314487800698096314L; L[4][2] = 0.314487800698096314L;  weight[4] = 0.040190448020966172L;
        L[5][0] = 0.314487800698096314L; L[5][1] = 0.314487800698096314L; L[5][2] = 0.056536597905711059L;  weight[5] = 0.040190448020966172L;
        L[6][0] = 0.314487800698096314L; L[6][1] = 0.056536597905711059L; L[6][2] = 0.314487800698096314L;  weight[6] = 0.040190448020966172L;
        L[7][0] = 0.056536597905711059L; L[7][1] = 0.314487800698096314L; L[7][2] = 0.314487800698096314L;  weight[7] = 0.040190448020966172L;
        L[8][0] = 0.101986693062703300L; L[8][1] = 0.101986693062703300L; L[8][2] = 0.101986693062703300L;  weight[8] = 0.024307975504770321L;
        L[9][0] = 0.101986693062703300L; L[9][1] = 0.101986693062703300L; L[9][2] = 0.694039920811890100L;  weight[9] = 0.024307975504770321L;
        L[10][0] = 0.101986693062703300L; L[10][1] = 0.694039920811890100L; L[10][2] = 0.101986693062703300L;  weight[10] = 0.024307975504770321L;
        L[11][0] = 0.694039920811890100L; L[11][1] = 0.101986693062703300L; L[11][2] = 0.101986693062703300L;  weight[11] = 0.024307975504770321L;
        L[12][0] = 0.184203696949191512L; L[12][1] = 0.184203696949191512L; L[12][2] = 0.184203696949191512L;  weight[12] = 0.054858892413697440L;
        L[13][0] = 0.184203696949191512L; L[13][1] = 0.184203696949191512L; L[13][2] = 0.447388909152425463L;  weight[13] = 0.054858892413697440L;
        L[14][0] = 0.184203696949191512L; L[14][1] = 0.447388909152425463L; L[14][2] = 0.184203696949191512L;  weight[14] = 0.054858892413697440L;
        L[15][0] = 0.447388909152425463L; L[15][1] = 0.184203696949191512L; L[15][2] = 0.184203696949191512L;  weight[15] = 0.054858892413697440L;
        L[16][0] = 0.063436287754539892L; L[16][1] = 0.063436287754539892L; L[16][2] = 0.436563712245460108L;  weight[16] = 0.035719612234099182L;
        L[17][0] = 0.063436287754539892L; L[17][1] = 0.436563712245460108L; L[17][2] = 0.063436287754539892L;  weight[17] = 0.035719612234099182L;
        L[18][0] = 0.063436287754539892L; L[18][1] = 0.436563712245460108L; L[18][2] = 0.436563712245460108L;  weight[18] = 0.035719612234099182L;
        L[19][0] = 0.436563712245460108L; L[19][1] = 0.436563712245460108L; L[19][2] = 0.063436287754539892L;  weight[19] = 0.035719612234099182L;
        L[20][0] = 0.436563712245460108L; L[20][1] = 0.063436287754539892L; L[20][2] = 0.436563712245460108L;  weight[20] = 0.035719612234099182L;
        L[21][0] = 0.436563712245460108L; L[21][1] = 0.063436287754539892L; L[21][2] = 0.063436287754539892L;  weight[21] = 0.035719612234099182L;
        L[22][0] = 0.021690162067728005L; L[22][1] = 0.021690162067728005L; L[22][2] = 0.719931922039465936L;  weight[22] = 0.007183190697852539L;
        L[23][0] = 0.021690162067728005L; L[23][1] = 0.021690162067728005L; L[23][2] = 0.236687753825078055L;  weight[23] = 0.007183190697852539L;
        L[24][0] = 0.021690162067728005L; L[24][1] = 0.719931922039465936L; L[24][2] = 0.021690162067728005L;  weight[24] = 0.007183190697852539L;
        L[25][0] = 0.021690162067728005L; L[25][1] = 0.719931922039465936L; L[25][2] = 0.236687753825078055L;  weight[25] = 0.007183190697852539L;
        L[26][0] = 0.021690162067728005L; L[26][1] = 0.236687753825078055L; L[26][2] = 0.021690162067728005L;  weight[26] = 0.007183190697852539L;
        L[27][0] = 0.021690162067728005L; L[27][1] = 0.236687753825078055L; L[27][2] = 0.719931922039465936L;  weight[27] = 0.007183190697852539L;
        L[28][0] = 0.719931922039465936L; L[28][1] = 0.021690162067728005L; L[28][2] = 0.021690162067728005L;  weight[28] = 0.007183190697852539L;
        L[29][0] = 0.719931922039465936L; L[29][1] = 0.021690162067728005L; L[29][2] = 0.236687753825078055L;  weight[29] = 0.007183190697852539L;
        L[30][0] = 0.719931922039465936L; L[30][1] = 0.236687753825078055L; L[30][2] = 0.021690162067728005L;  weight[30] = 0.007183190697852539L;
        L[31][0] = 0.236687753825078055L; L[31][1] = 0.021690162067728005L; L[31][2] = 0.021690162067728005L;  weight[31] = 0.007183190697852539L;
        L[32][0] = 0.236687753825078055L; L[32][1] = 0.021690162067728005L; L[32][2] = 0.719931922039465936L;  weight[32] = 0.007183190697852539L;
        L[33][0] = 0.236687753825078055L; L[33][1] = 0.719931922039465936L; L[33][2] = 0.021690162067728005L;  weight[33] = 0.007183190697852539L;
        L[34][0] = 0.204480080636795714L; L[34][1] = 0.204480080636795714L; L[34][2] = 0.580577190128809224L;  weight[34] = 0.016372181945319118L;
        L[35][0] = 0.204480080636795714L; L[35][1] = 0.204480080636795714L; L[35][2] = 0.010462648597599347L;  weight[35] = 0.016372181945319118L;
        L[36][0] = 0.204480080636795714L; L[36][1] = 0.580577190128809224L; L[36][2] = 0.204480080636795714L;  weight[36] = 0.016372181945319118L;
        L[37][0] = 0.204480080636795714L; L[37][1] = 0.580577190128809224L; L[37][2] = 0.010462648597599347L;  weight[37] = 0.016372181945319118L;
        L[38][0] = 0.204480080636795714L; L[38][1] = 0.010462648597599347L; L[38][2] = 0.204480080636795714L;  weight[38] = 0.016372181945319118L;
        L[39][0] = 0.204480080636795714L; L[39][1] = 0.010462648597599347L; L[39][2] = 0.580577190128809224L;  weight[39] = 0.016372181945319118L;
        L[40][0] = 0.580577190128809224L; L[40][1] = 0.204480080636795714L; L[40][2] = 0.204480080636795714L;  weight[40] = 0.016372181945319118L;
        L[41][0] = 0.580577190128809224L; L[41][1] = 0.204480080636795714L; L[41][2] = 0.010462648597599347L;  weight[41] = 0.016372181945319118L;
        L[42][0] = 0.580577190128809224L; L[42][1] = 0.010462648597599347L; L[42][2] = 0.204480080636795714L;  weight[42] = 0.016372181945319118L;
        L[43][0] = 0.010462648597599347L; L[43][1] = 0.204480080636795714L; L[43][2] = 0.204480080636795714L;  weight[43] = 0.016372181945319118L;
        L[44][0] = 0.010462648597599347L; L[44][1] = 0.204480080636795714L; L[44][2] = 0.580577190128809224L;  weight[44] = 0.016372181945319118L;
        L[45][0] = 0.010462648597599347L; L[45][1] = 0.580577190128809224L; L[45][2] = 0.204480080636795714L;  weight[45] = 0.016372181945319118L;
      }
      break;

      default:
      {
        std::cout << "erro: ordem de quadratura inválida ou não suportada\n";
        throw;
      }

      }
      
    weight /= 6.;
  } // end setOrder

  /** Avalia uma função nos pontos de quadratura no triangulo UNITARIO
  *
  *  @param t a função
  *  @param a os argumentos da função
  *
  *  @note a função deve recever os argumentos tal que \n
  *        f = f(L, [a]) \n
  *        onde L é um vetor 2d e a são os eventuais argumentos que a função pode tomar
  */
  template<class T, class ... Args>
  auto evaluate(T &&t, Args ... a) -> Eigen::Matrix<decltype(t(a...)), Eigen::Dynamic, 1>
  {
    Eigen::Matrix<decltype(t(a...)), Eigen::Dynamic, 1> ret(L.size());
    auto it = ret.begin();
    
    int q=0;
    for (; it != ret.end(); ++it)
    {
      (*it) = t(L[q], a...);
      ++q;
    }
    
    return ret;
  }
  
  int order;
  Eigen::Matrix<Eigen::Vector3d, Eigen::Dynamic, 1> L;
  Eigen::VectorXd weight;
};













#endif
